import { useState, useEffect } from "react";
import {
  Box,
  Typography,
  Paper,
  Button,
  Alert,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Divider,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Collapse,
  InputAdornment,
  Pagination,
  SelectChangeEvent,
} from "@mui/material";
import { Visibility, Edit, FilterList } from "@mui/icons-material";
import OrderService from "../../services/order.service";
import AdminOrderService, { AdminOrderFilter } from "../../services/admin-order.service";
import { PagedResponse } from "../../services/order.service";

interface OrderItem {
  id: number;
  book: {
    id: number;
    title: string;
    author: string;
    price: number;
  };
  quantity: number;
  price: number;
}

interface Order {
  id: number;
  userId: number;
  orderDate: string;
  totalAmount: number;
  status: string;
  items: OrderItem[];
  shippingInfo: {
    firstName: string;
    lastName: string;
    address: string;
    city: string;
    state: string;
    zipCode: string;
    email: string;
    phone: string;
  };
  paymentMethod: string;
}

// Status management now handled directly in the action buttons
const getStatusColor = (status: string) => {
  switch (status.toLowerCase()) {
    case "pending":
      return "warning";
    case "processing":
      return "info";
    case "shipped":
      return "primary";
    case "delivered":
      return "success";
    case "cancelled":
      return "error";
    default:
      return "default";
  }
};

export const OrderManagement = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [openDialog, setOpenDialog] = useState(false);
  
  // Pagination
  const [page, setPage] = useState(0);
  const [pageSize, setPageSize] = useState(10);
  const [totalItems, setTotalItems] = useState(0);
  const [totalPages, setTotalPages] = useState(0);
  
  // Filters
  const [showFilters, setShowFilters] = useState(false);
  const [statusFilter, setStatusFilter] = useState("");
  const [startDateFilter, setStartDateFilter] = useState("");
  const [endDateFilter, setEndDateFilter] = useState("");
  const [minAmountFilter, setMinAmountFilter] = useState("");
  const [maxAmountFilter, setMaxAmountFilter] = useState("");
  const [userIdFilter, setUserIdFilter] = useState("");

  useEffect(() => {
    fetchOrders();
  }, [page, pageSize]);

  const fetchOrders = async () => {
    setLoading(true);
    setError(null);
    setSuccessMessage(null);
    try {
      const filter: AdminOrderFilter = {
        status: statusFilter || undefined,
        startDate: startDateFilter || undefined,
        endDate: endDateFilter || undefined,
        minAmount: minAmountFilter ? parseFloat(minAmountFilter) : undefined,
        maxAmount: maxAmountFilter ? parseFloat(maxAmountFilter) : undefined,
        userId: userIdFilter ? parseInt(userIdFilter) : undefined
      };
      
      const response = await AdminOrderService.getAllOrders(filter, page, pageSize);
      
      // Handle paginated response
      setOrders(response.content);
      setTotalItems(response.totalElements);
      setTotalPages(response.totalPages);
      
    } catch (err) {
      console.error("Error fetching orders:", err);
      setError("Failed to load orders. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleStatusChange = async (orderId: number, newStatus: string) => {
    try {
      await AdminOrderService.updateOrderStatus(orderId, newStatus);
      await fetchOrders();
      setSuccessMessage(`Order #${orderId} status updated to ${newStatus}`);

      // Clear success message after 3 seconds
      setTimeout(() => {
        setSuccessMessage(null);
      }, 3000);
    } catch (err) {
      console.error("Error updating order status:", err);
      setError("Failed to update order status. Please try again.");
    }
  };

  const handleViewOrder = (order: Order) => {
    setSelectedOrder(order);
    setOpenDialog(true);
  };

  // Apply filters
  const applyFilters = () => {
    setPage(0); // Reset to first page when applying filters
    fetchOrders();
  };
  
  // Reset filters
  const resetFilters = () => {
    setStatusFilter("");
    setStartDateFilter("");
    setEndDateFilter("");
    setMinAmountFilter("");
    setMaxAmountFilter("");
    setUserIdFilter("");
    setPage(0);
    // Fetch with reset filters
    setTimeout(fetchOrders, 0);
  };

  // Handle page change
  const handlePageChange = (event: React.ChangeEvent<unknown>, value: number) => {
    setPage(value - 1); // MUI Pagination is 1-indexed, our API is 0-indexed
  };
  
  // Filter toggle
  const toggleFilters = () => {
    setShowFilters(!showFilters);
  };

  if (loading && orders.length === 0) {
    return (
      <Box sx={{ display: "flex", justifyContent: "center", py: 8 }}>
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        Order Management
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {successMessage && (
        <Alert severity="success" sx={{ mb: 3 }}>
          {successMessage}
        </Alert>
      )}

      {/* Filter Section */}
      <Paper sx={{ p: 2, mb: 3 }} elevation={2}>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
          <Typography variant="h6">
            Filters
          </Typography>
          <Button 
            startIcon={<FilterList />} 
            onClick={toggleFilters}
            variant="outlined"
            size="small"
          >
            {showFilters ? "Hide Filters" : "Show Filters"}
          </Button>
        </Box>

        <Collapse in={showFilters}>
          <Divider sx={{ mb: 2 }} />

          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 2 }}>
            <Box sx={{ width: { xs: '100%', sm: '47%', md: '30%' } }}>
              <FormControl fullWidth size="small">
                <InputLabel>Status</InputLabel>
                <Select
                  value={statusFilter}
                  onChange={(e) => setStatusFilter(e.target.value)}
                  label="Status"
                >
                  <MenuItem value="">All</MenuItem>
                  <MenuItem value="PENDING">Pending</MenuItem>
                  <MenuItem value="PROCESSING">Processing</MenuItem>
                  <MenuItem value="SHIPPED">Shipped</MenuItem>
                  <MenuItem value="DELIVERED">Delivered</MenuItem>
                  <MenuItem value="CANCELLED">Cancelled</MenuItem>
                </Select>
              </FormControl>
            </Box>

            <Box sx={{ width: { xs: '100%', sm: '47%', md: '30%' } }}>
              <TextField
                fullWidth
                label="From Date"
                type="date"
                size="small"
                value={startDateFilter}
                onChange={(e) => setStartDateFilter(e.target.value)}
                InputLabelProps={{ shrink: true }}
              />
            </Box>

            <Box sx={{ width: { xs: '100%', sm: '47%', md: '30%' } }}>
              <TextField
                fullWidth
                label="To Date"
                type="date"
                size="small"
                value={endDateFilter}
                onChange={(e) => setEndDateFilter(e.target.value)}
                InputLabelProps={{ shrink: true }}
              />
            </Box>

            <Box sx={{ width: { xs: '100%', sm: '47%', md: '30%' } }}>
              <TextField
                fullWidth
                label="Min Amount"
                type="number"
                size="small"
                value={minAmountFilter}
                onChange={(e) => setMinAmountFilter(e.target.value)}
                InputProps={{ startAdornment: <InputAdornment position="start">$</InputAdornment> }}
              />
            </Box>

            <Box sx={{ width: { xs: '100%', sm: '47%', md: '30%' } }}>
              <TextField
                fullWidth
                label="Max Amount"
                type="number"
                size="small"
                value={maxAmountFilter}
                onChange={(e) => setMaxAmountFilter(e.target.value)}
                InputProps={{ startAdornment: <InputAdornment position="start">$</InputAdornment> }}
              />
            </Box>

            <Box sx={{ width: { xs: '100%', sm: '47%', md: '30%' } }}>
              <TextField
                fullWidth
                label="User ID"
                type="number"
                size="small"
                value={userIdFilter}
                onChange={(e) => setUserIdFilter(e.target.value)}
              />
            </Box>
          </Box>

          <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
            <Button variant="outlined" onClick={resetFilters}>
              Reset
            </Button>
            <Button variant="contained" onClick={applyFilters}>
              Apply Filters
            </Button>
          </Box>
        </Collapse>
      </Paper>

      {loading ? (
        <Box sx={{ display: "flex", justifyContent: "center", py: 4 }}>
          <CircularProgress />
        </Box>
      ) : orders.length === 0 ? (
        <Paper sx={{ p: 3, textAlign: "center" }}>
          <Typography variant="h6" color="textSecondary">
            No orders found
          </Typography>
        </Paper>
      ) : (
        <>
          <TableContainer component={Paper}>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Order ID</TableCell>
                  <TableCell>User ID</TableCell>
                  <TableCell>Date</TableCell>
                  <TableCell>Amount</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {orders.map((order) => (
                  <TableRow key={order.id}>
                    <TableCell>{order.id}</TableCell>
                    <TableCell>{order.userId}</TableCell>
                    <TableCell>
                      {new Date(order.orderDate).toLocaleDateString()}
                    </TableCell>
                    <TableCell>${order.totalAmount.toFixed(2)}</TableCell>
                    <TableCell>
                      <Chip
                        label={order.status}
                        color={getStatusColor(order.status) as any}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Button
                        startIcon={<Visibility />}
                        size="small"
                        onClick={() => handleViewOrder(order)}
                        sx={{ mr: 1 }}
                      >
                        View
                      </Button>
                      <Button
                        startIcon={<Edit />}
                        size="small"
                        onClick={() => {
                          setSelectedOrder(order);
                          setOpenDialog(true);
                        }}
                      >
                        Edit
                      </Button>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>

          {/* Pagination */}
          <Box sx={{ display: "flex", justifyContent: "center", mt: 3 }}>
            <Pagination
              count={totalPages}
              page={page + 1} // API is 0-indexed, MUI Pagination is 1-indexed
              onChange={handlePageChange}
              color="primary"
            />
          </Box>
        </>
      )}

      {/* Order Detail Dialog */}
      <Dialog
        open={openDialog}
        onClose={() => setOpenDialog(false)}
        maxWidth="md"
        fullWidth
      >
        <DialogTitle>
          Order Details #{selectedOrder?.id}
        </DialogTitle>
        <DialogContent dividers>
          {selectedOrder && (
            <Box sx={{ p: 1 }}>
              {/* Customer Info */}
              <Typography variant="h6" gutterBottom>
                Customer Information
              </Typography>
              <Box sx={{ mb: 3 }}>
                <Typography>
                  <strong>Name:</strong> {selectedOrder.shippingInfo.firstName}{" "}
                  {selectedOrder.shippingInfo.lastName}
                </Typography>
                <Typography>
                  <strong>Email:</strong> {selectedOrder.shippingInfo.email}
                </Typography>
                <Typography>
                  <strong>Phone:</strong> {selectedOrder.shippingInfo.phone}
                </Typography>
              </Box>

              {/* Shipping Info */}
              <Typography variant="h6" gutterBottom>
                Shipping Address
              </Typography>
              <Box sx={{ mb: 3 }}>
                <Typography>
                  {selectedOrder.shippingInfo.address}
                </Typography>
                <Typography>
                  {selectedOrder.shippingInfo.city}, {selectedOrder.shippingInfo.state}{" "}
                  {selectedOrder.shippingInfo.zipCode}
                </Typography>
              </Box>

              {/* Order Items */}
              <Typography variant="h6" gutterBottom>
                Order Items
              </Typography>
              <TableContainer component={Paper} variant="outlined" sx={{ mb: 3 }}>
                <Table size="small">
                  <TableHead>
                    <TableRow>
                      <TableCell>Book</TableCell>
                      <TableCell align="right">Price</TableCell>
                      <TableCell align="right">Quantity</TableCell>
                      <TableCell align="right">Total</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {selectedOrder.items.map((item) => (
                      <TableRow key={item.id}>
                        <TableCell>
                          {item.book.title} by {item.book.author}
                        </TableCell>
                        <TableCell align="right">${item.book.price.toFixed(2)}</TableCell>
                        <TableCell align="right">{item.quantity}</TableCell>
                        <TableCell align="right">${(item.quantity * item.price).toFixed(2)}</TableCell>
                      </TableRow>
                    ))}
                    <TableRow>
                      <TableCell colSpan={3} align="right">
                        <strong>Total:</strong>
                      </TableCell>
                      <TableCell align="right">
                        <strong>${selectedOrder.totalAmount.toFixed(2)}</strong>
                      </TableCell>
                    </TableRow>
                  </TableBody>
                </Table>
              </TableContainer>

              {/* Order Status */}
              <Typography variant="h6" gutterBottom>
                Order Status
              </Typography>
              <Box sx={{ mb: 3 }}>
                <Chip
                  label={selectedOrder.status}
                  color={getStatusColor(selectedOrder.status) as any}
                />
              </Box>
            </Box>
          )}
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)}>Close</Button>
          {selectedOrder && selectedOrder.status !== "DELIVERED" && (
            <Button
              color="primary"
              onClick={() => 
                handleStatusChange(
                  selectedOrder.id, 
                  selectedOrder.status === "PENDING" ? "PROCESSING" :
                  selectedOrder.status === "PROCESSING" ? "SHIPPED" :
                  selectedOrder.status === "SHIPPED" ? "DELIVERED" : selectedOrder.status
                )
              }
            >
              Update Status
            </Button>
          )}
        </DialogActions>
      </Dialog>
    </Box>
  );
};
